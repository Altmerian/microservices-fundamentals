plugins {
    id 'org.springframework.boot' apply false
    id 'io.spring.dependency-management'
    id 'java'
    id 'jacoco'
    id "com.palantir.docker" version "0.34.0" apply false
    id 'de.undercouch.download' version "5.1.2"
}

jar {
    enabled = false
}

allprojects {
    group = 'com.pshakhlovich'
//    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'
    targetCompatibility = '17'

    repositories {
        mavenCentral()
        mavenLocal()
    }
}

ext {
    testcontainersVersion = '1.17.3'
    cucumberVersion = '7.4.1'
    junitVersion = '5.8.2'
    otelVersion = '1.17.0'
    springCloudVersion = "${BOM_VERSION}"
}

// Download the OpenTelemetry java agent and put it in the build directory
task downloadAgent(type: Download) {
    src "https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/download/v${otelVersion}/opentelemetry-javaagent.jar"
    dest project.projectDir.toString() + "/opentelemetry-javaagent.jar"
    overwrite true
}

build.finalizedBy downloadAgent

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'com.palantir.docker'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        cucumberRuntime {
            extendsFrom testImplementation
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'

        runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
        testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"

        testImplementation(platform("org.junit:junit-bom:${junitVersion}"))
        testImplementation(platform("io.cucumber:cucumber-bom:${cucumberVersion}"))

        testImplementation "io.cucumber:cucumber-java"
        testImplementation "io.cucumber:cucumber-spring"
        testImplementation "io.cucumber:cucumber-junit"
        testImplementation "io.cucumber:cucumber-junit-platform-engine"
        testImplementation "org.junit.platform:junit-platform-suite"
        testImplementation 'io.rest-assured:rest-assured'
        testImplementation 'io.rest-assured:spring-mock-mvc'

        testCompileOnly 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    }

    test {
        useJUnitPlatform()
        environment "spring.profiles.active", "test"

        testLogging {
            events "passed", "skipped", "failed"
        }

        filter {
            excludeTestsMatching "*.CucumberTest"
            excludeTestsMatching "*.*ContractTest*"
        }

        // Work around. Gradle does not include enough information to disambiguate
        // between different examples and scenarios.
        systemProperty("cucumber.junit-platform.naming-strategy", "long")
    }

    test.finalizedBy jacocoTestReport

    task consumerContractTest(type: Test, group: 'verification') {
        useJUnitPlatform()
        description = "Task to run contract tests"
        environment "spring.profiles.active", "test"

        testLogging {
            events "passed", "skipped", "failed"
        }

        include("**/contract/**")
    }

    task cucumber() {
        dependsOn assemble, testClasses
        doLast {
            javaexec {
                main = "io.cucumber.core.cli.Main"
                classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
                args = ['--plugin', 'pretty', '--glue', 'com.pshakhlovich.microservices_fundamentals', 'src/test/resources']
                environment += ['CUCUMBER_PUBLISH_ENABLED': 'true', 'spring.profiles.active': 'test']
            }
        }
    }

    docker {
        dependsOn build
        dockerfile file('Dockerfile')
        name "microservices/${project.name}:latest"
        files bootJar.archiveFile.get().asFile
        buildArgs(['JAR_FILE': "${bootJar.archiveFileName.get()}"])
    }

    task copyFileFromRootProject(type: Copy) {
        from "${rootProject.projectDir}/opentelemetry-javaagent.jar"
        into 'build/otel'
        dependsOn rootProject.downloadAgent
    }

    build.finalizedBy copyFileFromRootProject
}
