version: '3.9'

x-logging: &logging
  labels:
    - "scrap-logs=true"

services:
  resource-service-db:
    image: postgres:14-alpine
    env_file: resource-service.env
    ports:
      - 5433:5432
    volumes:
      - resource-service-db:/var/lib/postgresql/data/

  song-service-db:
    image: postgres:14-alpine
    env_file: song-service.env
    ports:
      - 5434:5432
    volumes:
      - song-service-db:/var/lib/postgresql/data/

  storage-service-db:
    image: postgres:14-alpine
    env_file: storage-service.env
    ports:
      - 5435:5432
    volumes:
      - storage-service-db:/var/lib/postgresql/data/

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - 9093:9093
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    volumes:
      - kafka:/var/lib/kafka/data

  eureka-discovery-service:
    <<: *logging
    build:
      context: ../eureka-discovery-service
      args:
        JAR_FILE: build/libs/eureka-discovery-service.jar
    hostname: eureka-discovery-service
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name=eureka-discovery-service
    ports:
      - 8761:8761
    env_file: .env

  api-gateway-service:
    <<: *logging
    build:
      context: ../api-gateway-service
      args:
        JAR_FILE: build/libs/api-gateway-service.jar
    ports:
      - 8090:8090
    env_file:
      - api-gateway.env
      - .env
    depends_on:
      - eureka-discovery-service
      - resource-service
      - song-service
      - resource-processor
      - storage-service

  resource-service:
    <<: *logging
    build:
      context: ../resource-service
      args:
        JAR_FILE: build/libs/resource-service.jar
    env_file:
      - resource-service.env
      - .env
    ports:
      - 8081:8081
    volumes:
      - ~/.aws/:/root/.aws:ro
    depends_on:
      - resource-service-db
      - kafka
      - eureka-discovery-service

  resource-processor:
    <<: *logging
    build:
      context: ../resource-processor
      args:
        JAR_FILE: build/libs/resource-processor.jar
    env_file:
      - resource-processor.env
      - .env
    #    ports:
    #      - 8080:8080
    depends_on:
      - resource-service
      - kafka
      - eureka-discovery-service

  song-service:
    <<: *logging
    build:
      context: ../song-service
      args:
        JAR_FILE: build/libs/song-service.jar
    env_file:
      - song-service.env
      - .env
    #    ports:
    #      - 8082:8082
    depends_on:
      - song-service-db
      - eureka-discovery-service

  storage-service:
    <<: *logging
    build:
      context: ../storage-service
      args:
        JAR_FILE: build/libs/storage-service.jar
    env_file:
      - storage-service.env
      - .env
    #    ports:
    #      - 8083:8083
    depends_on:
      - storage-service-db
      - eureka-discovery-service

  loki:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/config.yaml
    volumes:
      - ../loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3101:3100"
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    depends_on:
      - promtail

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ../promtail-config.yaml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock
    command: '-config.file=/etc/promtail/config.yml -config.expand-env'
    depends_on:
      - eureka-discovery-service
      - resource-service
      - song-service
      - resource-processor
      - storage-service

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - ../grafana/provisioning:/etc/grafana/provisioning/
      - ../grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    depends_on:
      - loki
      - tempo-query
      - prometheus

  prometheus:
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ../prometheus-config.yaml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - cadvisor

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
      - eureka-discovery-service
      - resource-service
      - song-service
      - resource-processor
      - storage-service

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ../tempo-local.yaml:/etc/tempo.yaml
    restart: unless-stopped
    ports:
      - "14268:14268"  # jaeger ingest, Jaeger - Thrift HTTP
      - "14250:14250"  # Jaeger - GRPC
      - "55680:55680"  # OpenTelemetry
      - "3102:3100"   # tempo

  tempo-query:
    image: grafana/tempo-query:latest
    command: ["--grpc-storage-plugin.configuration-file=../tempo-query.yaml"]
    volumes:
      - ../tempo-query.yaml:/etc/tempo-query.yaml
    ports:
      - "16686:16686"  # jaeger-ui
    depends_on:
      - tempo

volumes:
  resource-service-db:
  song-service-db:
  storage-service-db:
  kafka:
  grafana-storage:
